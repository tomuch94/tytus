
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftR_UNIONR_INTERSECTR_EXCEPTrightR_NOTleftR_ANDR_ORleftR_BETWEENR_ISleftS_IGUALOL_DISTINTODEOL_MAYORQUEOL_MENORQUEOL_MAYORIGUALQUEOL_MENORIGUALQUEleftOC_CONCATENARleftO_SUMAO_RESTAleftO_PRODUCTOO_DIVISIONO_MODULARrightUO_SUMAUO_RESTAleftO_EXPONENTECHARACTER COMMENT DECIMAL ID INTEGER OC_AND OC_CONCATENAR OC_NOT OC_OR OC_SHIFTL OC_SHIFTR OC_XOR OL_DISTINTODE OL_ESIGUAL OL_MAYORIGUALQUE OL_MAYORQUE OL_MENORIGUALQUE OL_MENORQUE O_DIVISION O_EXPONENTE O_MODULAR O_PRODUCTO O_RESTA O_SUMA R_ADD R_ALL R_ALTER R_AND R_ANY R_AS R_ASC R_BETWEEN R_BY R_CASE R_CHECK R_COLUMN R_CONSTRAINT R_COUNT R_CREATE R_CURRENT_DATE R_CURRENT_TIME R_CURRENT_USER R_DATABASE R_DATABASES R_DATE_PART R_DAY R_DEFAULT R_DELETE R_DESC R_DISTINCT R_DROP R_ELSE R_END R_ENUM R_EXCEPT R_EXISTS R_EXTRACT R_FALSE R_FIRST R_FOREIGN R_FROM R_FULL R_GROUP R_HAVING R_HOUR R_IF R_IN R_INHERITS R_INNER R_INSERT R_INTERSECT R_INTERVAL R_INTO R_IS R_ISNULL R_JOIN R_KEY R_LAST R_LEFT R_LIKE R_LIMIT R_MINUTE R_MODE R_MONTH R_NATURAL R_NOT R_NOTNULL R_NOW R_NULL R_NULLS R_OFFSET R_ON R_OR R_ORDER R_OUTER R_OWNER R_PRIMARY R_PROM R_REFERENCES R_RENAME R_REPLACE R_RIGHT R_SECOND R_SELECT R_SESSION_USER R_SET R_SHOW R_SOME R_SUM R_SYMMETRIC R_TABLE R_THEN R_TIMESTAMP R_TO R_TRUE R_TRUNCATE R_TYPE R_UNION R_UNIQUE R_UNKNOWN R_UPDATE R_USE R_USING R_VALUES R_WHEN R_WHERE R_YEAR STRING S_COMA S_IGUAL S_PARDER S_PARIZQ S_PUNTO S_PUNTOCOMA T_BIGINT T_BOOLEAN T_CHAR T_CHARACTER T_DATE T_DECIMAL T_DOUBLE T_INTEGER T_MONEY T_NUMERIC T_PRECISION T_REAL T_SMALLINT T_TEXT T_TIME T_VARCHAR T_VARYINGinit : stmtListstmtList : stmtList stmtstmtList : stmt\n    stmt : createStmt  S_PUNTOCOMA\n        | showStmt S_PUNTOCOMA\n        | alterStmt S_PUNTOCOMA\n        | dropStmt S_PUNTOCOMA\n        | insertStmt S_PUNTOCOMA\n        | updateStmt S_PUNTOCOMA\n        | deleteStmt S_PUNTOCOMA\n        | truncateStmt S_PUNTOCOMA\n        | useStmt S_PUNTOCOMA\n        | selectStmt S_PUNTOCOMA\n    \n    idOrString : ID\n    | STRING\n    | CHARACTER\n    createStmt : R_CREATE createBody\n    createBody : createOpts\n    createOpts : R_TABLE ifNotExists idOrString S_PARIZQ createTableList S_PARDER inheritsOpt \n    createOpts : orReplace R_DATABASE ifNotExists idOrString createOwner createMode\n    \n    orReplace : R_OR R_REPLACE\n    \n    orReplace :\n    \n    createOpts : R_TYPE ifNotExists ID R_AS R_ENUM S_PARIZQ paramsList S_PARDER\n    \n    ifNotExists : R_IF R_NOT R_EXISTS\n    \n    ifNotExists :\n    \n    inheritsOpt : R_INHERITS S_PARIZQ ID S_PARDER\n    \n    inheritsOpt :\n    \n    createOwner : R_OWNER ID\n    | R_OWNER STRING\n    \n    createOwner :  R_OWNER S_IGUAL ID\n    | R_OWNER S_IGUAL STRING\n    \n    createOwner :\n    \n    createMode : R_MODE INTEGER\n    \n    createMode : R_MODE S_IGUAL INTEGER\n    \n    createMode :\n    createTableList : createTableList S_COMA createTablecreateTableList :  createTable\n    createTable :  ID types createColumns\n    \n    createTable : createConstraint\n    | createUnique\n    | createPrimary\n    | createForeign\n    \n    createColumns : colOptionsList\n    \n    createColumns :\n    createConstraint : constrName R_CHECK S_PARIZQ booleanCheck S_PARDERcreateUnique : R_UNIQUE S_PARIZQ idList S_PARDERcreatePrimary : R_PRIMARY R_KEY S_PARIZQ idList S_PARDER\n    createForeign : constrName R_FOREIGN R_KEY S_PARIZQ idList S_PARDER R_REFERENCES ID S_PARIZQ idList S_PARDER\n    \n    constrName : R_CONSTRAINT ID\n    \n    constrName :\n    idList : idList S_COMA IDidList : ID\n    types :  ID\n    \n    types : T_SMALLINT\n    | T_INTEGER\n    | T_BIGINT\n    | T_REAL\n    | T_DOUBLE T_PRECISION\n    | T_MONEY\n    | T_TEXT\n    | T_BOOLEAN\n    | R_TIMESTAMP\n    | T_DATE\n    | T_TIME\n    \n    types : T_DECIMAL optParams\n    | T_NUMERIC optParams\n    | T_VARCHAR optParams\n    | T_CHARACTER optParams\n    | T_CHAR optParams\n    \n    types : T_CHARACTER T_VARYING optParams\n    \n    types : R_INTERVAL intervalFields\n    \n    intervalFields :  R_YEAR\n    | R_MONTH\n    | R_DAY\n    | R_HOUR\n    | R_MINUTE\n    | R_SECOND\n    \n    intervalFields :\n    optParams : S_PARIZQ literalList S_PARDERoptParams : colOptionsList : colOptionsList colOptionscolOptionsList : colOptions\n    colOptions : defaultVal\n    | nullOpt\n    | constraintOpt\n    | primaryOpt\n    | referencesOpt\n    defaultVal : R_DEFAULT literal\n    nullOpt : R_NOT R_NULL\n    \n    nullOpt : R_NULL\n    \n    constraintOpt : constrName R_UNIQUE\n    \n    constraintOpt : constrName R_CHECK S_PARIZQ booleanCheck S_PARDER\n    primaryOpt : R_PRIMARY R_KEYreferencesOpt : R_REFERENCES ID\n    expresion : datatype\n            | expBool\n    \n    expresion : S_PARIZQ selectStmt S_PARDER\n    \n    funcCall : ID S_PARIZQ paramsList S_PARDER\n    \n    funcCall : ID S_PARIZQ S_PARDER\n            | R_NOW S_PARIZQ S_PARDER\n    \n    funcCall : R_COUNT S_PARIZQ datatype S_PARDER\n            | R_COUNT S_PARIZQ O_PRODUCTO S_PARDER\n            | R_SUM S_PARIZQ datatype S_PARDER\n            | R_PROM S_PARIZQ datatype S_PARDER\n    \n    extract : R_EXTRACT S_PARIZQ optsExtract R_FROM timeStamp S_PARDER\n    \n    extract : R_EXTRACT S_PARIZQ optsExtract R_FROM columnName S_PARDER\n    \n    timeStamp : R_TIMESTAMP STRING\n          | R_INTERVAL STRING\n    \n    optsExtract : R_YEAR\n                  | R_MONTH\n                  | R_DAY\n                  | R_HOUR\n                  | R_MINUTE\n                  | R_SECOND\n    \n    datePart : R_DATE_PART S_PARIZQ STRING S_COMA dateSource S_PARDER\n    \n    dateSource : R_TIMESTAMP STRING\n          | T_DATE STRING\n          | T_TIME STRING\n          | R_INTERVAL STRING\n          | R_NOW S_PARIZQ S_PARDER\n    \n    current : R_CURRENT_DATE\n          | R_CURRENT_TIME\n    \n    current : timeStamp\n    literalList : literalList S_COMA literalliteralList : literal\n    literal :  INTEGER\n    | STRING\n    | DECIMAL\n    | CHARACTER\n    | R_TRUE\n    | R_FALSE\n    | R_NULL\n    paramsList : paramsList S_COMA datatypeparamsList : datatype\n    datatype : datatype O_SUMA datatype\n    | datatype O_RESTA datatype\n    | datatype O_PRODUCTO datatype\n    | datatype O_DIVISION datatype\n    | datatype O_EXPONENTE datatype\n    | datatype O_MODULAR datatype\n    \n    datatype : datatype OC_CONCATENAR datatype\n    \n    datatype : R_CASE caseList optElse R_END\n    \n    caseList : caseList caseWhen\n            | caseWhen\n    caseWhen : R_WHEN expBool R_THEN literaloptElse : R_ELSE literal\n    |\n    \n    datatype : O_RESTA datatype %prec UO_RESTA\n    | O_SUMA datatype %prec UO_SUMA\n    \n    datatype : columnName\n    | literal\n    | funcCall\n    | extract\n    | datePart\n    | current\n    \n    datatype : S_PARIZQ datatype S_PARDER\n    \n    expComp : datatype OL_MENORQUE datatype\n    | datatype OL_MAYORQUE datatype\n    | datatype OL_MAYORIGUALQUE datatype\n    | datatype OL_MENORIGUALQUE datatype\n    | datatype S_IGUAL datatype\n    | datatype OL_DISTINTODE datatype\n    \n    expComp : datatype R_IS R_DISTINCT R_FROM datatype\n    \n    expComp : datatype R_IS R_NOT R_DISTINCT R_FROM datatype\n    \n    expComp :  datatype R_BETWEEN datatype R_AND datatype\n    \n    expComp : datatype R_NOT R_BETWEEN datatype R_AND datatype\n    | datatype R_BETWEEN R_SYMMETRIC datatype R_AND datatype\n    \n    expComp : datatype R_ISNULL\n    | datatype R_NOTNULL\n    \n    expComp : datatype R_IS R_NULL\n    | datatype R_IS R_TRUE\n    | datatype R_IS R_FALSE\n    | datatype R_IS R_UNKNOWN\n    \n    expComp : datatype R_IS R_NOT R_NULL\n    | datatype R_IS R_NOT R_TRUE\n    | datatype R_IS R_NOT R_FALSE\n    | datatype R_IS R_NOT R_UNKNOWN\n    \n    stringExp : STRING\n          | columnName\n    \n    subqValues : R_ALL\n                  | R_ANY\n                  | R_SOME\n    \n    boolean : R_EXISTS S_PARIZQ selectStmt S_PARDER\n    \n    boolean : datatype R_IN S_PARIZQ selectStmt S_PARDER\n    \n    boolean : datatype R_NOT R_IN S_PARIZQ selectStmt S_PARDER\n    \n    boolean : expComp\n    \n    expBool : expBool R_AND expBool\n            | expBool R_OR expBool\n    \n    expBool : R_NOT expBool\n    \n    expBool : S_PARIZQ expBool S_PARDER\n    \n    expBool : expBool optBoolPredicate\n    \n    expBool : boolean\n    \n    optBoolPredicate : R_IS R_TRUE\n    | R_IS R_FALSE\n    | R_IS R_UNKNOWN\n    \n    optBoolPredicate : R_IS R_NOT R_TRUE\n    | R_IS R_NOT R_FALSE\n    | R_IS R_NOT R_UNKNOWN\n    \n    columnName : ID\n    \n    columnName : ID S_PUNTO ID\n    \n    booleanCheck : idOrLiteral OL_MENORQUE idOrLiteral\n    | idOrLiteral OL_MAYORQUE idOrLiteral\n    | idOrLiteral OL_MAYORIGUALQUE idOrLiteral\n    | idOrLiteral OL_MENORIGUALQUE idOrLiteral\n    | idOrLiteral S_IGUAL idOrLiteral\n    | idOrLiteral OL_DISTINTODE idOrLiteral\n    \n    booleanCheck : idOrLiteral R_IS R_DISTINCT R_FROM idOrLiteral\n    \n    booleanCheck : idOrLiteral R_IS R_NOT R_DISTINCT R_FROM idOrLiteral\n    \n    idOrLiteral : ID\n    | INTEGER\n    | STRING\n    | DECIMAL\n    | CHARACTER\n    | R_TRUE\n    | R_FALSE\n    alterStmt : R_ALTER R_DATABASE idOrString alterDb\n    | R_ALTER R_TABLE idOrString alterTableList\n    alterDb : R_RENAME R_TO idOrString\n    | R_OWNER R_TO ownerOPts\n    \n    ownerOPts : idOrString\n    | R_CURRENT_USER\n    | R_SESSION_USER\n    \n    alterTableList : alterTableList S_COMA alterTable\n    \n    alterTableList : alterTable\n    \n    alterTable : R_ADD alterAdd\n    | R_ALTER alterAlter\n    | R_DROP alterDrop\n    | R_RENAME alterRename\n    \n    alterAdd : R_COLUMN ID types\n    \n    alterAdd : createConstraint\n    | createPrimary\n    | createForeign\n    \n    alterAdd : constrName R_UNIQUE S_PARIZQ ID S_PARDER\n    \n    alterAlter : R_COLUMN ID R_SET nullOpt\n    | R_COLUMN ID R_SET defaultVal\n    | R_COLUMN ID R_TYPE types\n    \n    alterDrop : R_CONSTRAINT ID\n    | R_COLUMN ID\n    \n    alterRename : R_COLUMN ID R_TO ID\n    \n    dropStmt : R_DROP R_TABLE ifExists idOrString\n    | R_DROP R_DATABASE ifExists idOrString\n    ifExists : R_IF R_EXISTS\n    |\n    selectStmt : R_SELECT R_DISTINCT selectParams fromCl whereCl groupByCl limitCl orderByClselectStmt : R_SELECT selectParams fromCl whereCl groupByCl limitCl orderByClselectStmt : selectStmt R_UNION allOpt selectStmtselectStmt : selectStmt R_INTERSECT allOpt selectStmtselectStmt : selectStmt R_EXCEPT allOpt selectStmtselectStmt : S_PARIZQ selectStmt S_PARDER\n    fromCl : R_FROM tableExp\n    selectStmt : R_SELECT selectParamsallOpt : R_ALL\n    |\n    selectParams : O_PRODUCTOselectParams : selectListselectList : selectList S_COMA selectListParams optAliasselectList : selectListParams optAliasselectListParams : expresionselectListParams : ID S_PUNTO O_PRODUCTO\n    optAlias : R_AS idOrString\n    \n    optAlias : idOrString\n    optAlias : tableExp : tableExp S_COMA fromBody tableExp : fromBody fromBody : ID optAliasfromBody : S_PARIZQ selectStmt S_PARDER R_AS idOrStringjoinList : joinList2joinList2 : joinList2 joinCl\n    | joinCljoinCl : joinOpt R_JOIN columnName optAlias R_ON expBool\n    | joinOpt R_JOIN columnName optAlias R_USING S_PARIZQ nameList S_PARDER\n    | R_NATURAL joinOpt R_JOIN columnName optAlias\n    nameList : nameList S_COMA columnName\n    | columnName\n    joinOpt : R_INNER\n    | R_LEFT\n    | R_LEFT R_OUTER\n    | R_RIGHT\n    | R_RIGHT R_OUTER\n    | R_FULL\n    | R_FULL R_OUTER\n    whereCl : R_WHERE expBoolwhereCl : \n    groupByCl : R_GROUP R_BY groupList havingCl\n    \n    groupByCl :\n    \n    groupList :  groupList S_COMA columnName\n            | groupList S_COMA INTEGER\n    \n    groupList :  columnName\n            | INTEGER\n    havingCl : R_HAVING expBoolhavingCl :orderByCl : R_ORDER R_BY orderListorderByCl : orderList : orderList S_COMA orderByElemorderList : orderByElem\n    orderByElem : columnName orderOpts orderNull\n                | INTEGER orderOpts orderNull\n    orderOpts : R_ASC\n    | R_DESC\n    orderOpts :orderNull : R_NULLS R_FIRST\n    | R_NULLS R_LAST\n    orderNull :limitCl : R_LIMIT INTEGER offsetLimit\n    | R_LIMIT R_ALL offsetLimit\n    limitCl :offsetLimit : R_OFFSET INTEGERoffsetLimit :insertStmt : R_INSERT R_INTO ID paramsColumn R_VALUES S_PARIZQ paramsList S_PARDERparamsColumn : S_PARIZQ idList S_PARDERparamsColumn :updateStmt : R_UPDATE fromBody R_SET updateCols whereClupdateCols : updateCols S_COMA updateValsupdateCols : updateVals updateVals : ID S_IGUAL updateExpupdateExp : datatype\n    | R_DEFAULT\n    deleteStmt : R_DELETE fromCl whereCltruncateStmt : R_TRUNCATE tableOpt IDtableOpt : R_TABLE\n    |\n    showStmt : R_SHOW R_DATABASES likeOptlikeOpt : R_LIKE STRING\n    |\n    useStmt : R_USE ID'
    
_lr_action_items = {'R_CREATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_SHOW':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_ALTER':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,113,114,115,116,282,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,195,195,]),'R_DROP':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,113,114,115,116,282,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,199,199,]),'R_INSERT':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_UPDATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_DELETE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[21,21,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_TRUNCATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_USE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[23,23,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_SELECT':([0,2,3,19,25,26,27,28,29,30,31,32,33,34,35,36,37,38,54,69,101,102,103,104,161,181,228,311,],[24,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-253,-253,-253,24,24,24,-252,24,24,24,24,24,24,]),'S_PARIZQ':([0,2,3,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,54,56,60,66,69,70,71,79,88,89,90,91,92,94,97,101,102,103,104,113,114,115,120,128,134,137,138,139,140,141,142,143,144,145,147,148,149,150,151,152,154,157,158,161,165,167,171,173,176,177,178,181,187,212,228,229,230,244,296,301,309,311,313,319,342,345,354,355,357,362,377,379,381,391,407,408,409,410,411,419,425,451,473,512,519,578,],[19,19,-3,19,54,69,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-253,-253,-253,19,54,69,137,161,167,167,173,175,176,177,178,179,180,181,19,-252,19,19,-14,-15,-16,205,173,69,167,167,167,167,167,167,167,167,228,167,167,167,167,167,167,167,173,173,161,137,167,173,173,167,167,167,19,274,54,19,311,167,167,362,167,167,19,167,167,413,419,423,424,426,167,167,167,167,449,469,469,469,469,469,167,501,514,469,173,548,582,]),'$end':([1,2,3,25,26,27,28,29,30,31,32,33,34,35,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'S_PUNTOCOMA':([4,5,6,7,8,9,10,11,12,13,39,40,45,53,55,59,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,110,113,114,115,121,123,125,127,129,130,131,133,135,155,156,159,165,166,168,172,182,183,184,185,186,191,192,196,197,201,203,206,207,209,211,213,214,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,276,280,283,285,286,287,291,294,299,303,304,305,307,308,315,316,317,318,321,322,323,324,327,328,329,330,333,343,346,347,348,349,350,352,359,360,365,366,367,368,369,370,371,375,378,380,385,392,394,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,414,416,417,422,430,431,433,434,435,436,437,438,439,440,441,442,443,444,450,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,483,485,486,488,489,490,503,504,505,507,509,510,516,517,524,526,527,528,529,538,539,540,541,542,543,544,545,546,549,561,562,563,564,565,571,572,574,579,580,584,],[26,27,28,29,30,31,32,33,34,35,-17,-18,-324,-262,-283,-325,-251,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-322,-14,-15,-16,-249,-265,-261,-318,-250,-264,-319,-283,-257,-168,-169,-191,-199,-149,-148,-189,-107,-108,-246,-247,-248,-323,-216,-217,-224,-240,-241,-283,-314,-260,-282,-283,-285,-262,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,-32,-226,-225,-230,-231,-232,-227,-228,-312,-263,-285,-306,-256,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-35,-218,-219,-220,-221,-222,-223,-237,-238,-313,-315,-316,-317,-266,-306,-293,-184,-163,-165,-199,-27,-53,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,-20,-28,-29,-229,-293,-245,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-19,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-33,-30,-31,-234,-235,-236,-239,-309,-244,-304,-305,-284,-88,-89,-70,-34,-23,-233,-45,-47,-292,-295,-300,-300,-307,-286,-287,-290,-79,-303,-298,-299,-303,-26,-294,-296,-297,-301,-302,-48,]),'R_UNION':([13,51,53,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,121,123,125,126,129,130,133,135,155,156,159,162,165,166,168,172,182,183,184,185,186,209,211,213,214,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,273,303,304,305,307,308,310,315,316,317,318,321,322,323,324,327,328,329,330,333,369,370,371,375,376,378,380,385,430,431,433,434,435,436,437,438,439,440,441,442,443,444,505,507,509,510,539,540,541,542,543,544,545,546,561,562,563,564,571,572,574,579,580,],[36,36,-262,-251,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-249,-265,-261,36,-250,-264,-283,-257,-168,-169,-191,36,-199,-149,-148,-189,-107,-108,-246,-247,-248,-260,-282,-283,-285,-262,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,36,-263,-285,-306,-256,-98,36,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,-306,-293,-184,36,-163,-165,-199,-293,-245,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-244,-304,-305,-284,-292,-295,-300,-300,-307,-286,-287,-290,-303,-298,-299,-303,-294,-296,-297,-301,-302,]),'R_INTERSECT':([13,51,53,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,121,123,125,126,129,130,133,135,155,156,159,162,165,166,168,172,182,183,184,185,186,209,211,213,214,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,273,303,304,305,307,308,310,315,316,317,318,321,322,323,324,327,328,329,330,333,369,370,371,375,376,378,380,385,430,431,433,434,435,436,437,438,439,440,441,442,443,444,505,507,509,510,539,540,541,542,543,544,545,546,561,562,563,564,571,572,574,579,580,],[37,37,-262,-251,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-249,-265,-261,37,-250,-264,-283,-257,-168,-169,-191,37,-199,-149,-148,-189,-107,-108,-246,-247,-248,-260,-282,-283,-285,-262,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,37,-263,-285,-306,-256,-98,37,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,-306,-293,-184,37,-163,-165,-199,-293,-245,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-244,-304,-305,-284,-292,-295,-300,-300,-307,-286,-287,-290,-303,-298,-299,-303,-294,-296,-297,-301,-302,]),'R_EXCEPT':([13,51,53,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,121,123,125,126,129,130,133,135,155,156,159,162,165,166,168,172,182,183,184,185,186,209,211,213,214,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,273,303,304,305,307,308,310,315,316,317,318,321,322,323,324,327,328,329,330,333,369,370,371,375,376,378,380,385,430,431,433,434,435,436,437,438,439,440,441,442,443,444,505,507,509,510,539,540,541,542,543,544,545,546,561,562,563,564,571,572,574,579,580,],[38,38,-262,-251,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-249,-265,-261,38,-250,-264,-283,-257,-168,-169,-191,38,-199,-149,-148,-189,-107,-108,-246,-247,-248,-260,-282,-283,-285,-262,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,38,-263,-285,-306,-256,-98,38,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,-306,-293,-184,38,-163,-165,-199,-293,-245,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-244,-304,-305,-284,-292,-295,-300,-300,-307,-286,-287,-290,-303,-298,-299,-303,-294,-296,-297,-301,-302,]),'R_TABLE':([14,16,17,22,],[41,47,48,58,]),'R_TYPE':([14,351,],[43,421,]),'R_OR':([14,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,155,156,159,164,165,166,168,172,182,183,211,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,259,260,308,315,316,317,318,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,546,],[44,158,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-168,-169,-191,158,-199,-149,-148,158,-107,-108,158,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-156,-190,158,-100,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,158,]),'R_DATABASE':([14,16,17,42,109,],[-22,46,49,107,-21,]),'R_DATABASES':([15,],[45,]),'R_INTO':([18,],[50,]),'ID':([20,22,23,24,41,43,46,47,48,49,50,53,56,57,58,60,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,95,96,98,105,107,108,117,119,122,124,128,134,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,155,156,157,158,159,161,165,166,167,168,171,172,173,176,177,178,182,183,189,202,205,212,215,216,217,219,221,222,223,224,225,226,227,230,231,232,233,234,235,236,239,240,241,242,244,245,246,247,248,249,251,252,253,254,260,274,275,278,279,281,284,290,292,293,295,300,301,302,308,309,313,315,316,317,318,319,321,322,323,324,327,328,329,330,331,333,336,344,353,362,364,373,375,377,378,379,380,381,393,413,418,419,421,423,424,426,427,438,439,440,441,442,443,444,466,501,506,511,512,514,530,531,532,533,534,535,548,560,568,570,577,582,],[53,-321,59,66,-25,-25,113,113,-243,-243,120,113,53,131,-320,66,113,-258,-199,-95,-96,165,165,165,-150,-151,-152,-153,-154,-155,165,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,113,-25,190,113,113,208,113,165,66,216,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,-168,-169,165,165,-191,165,-199,-149,165,-148,165,-189,165,165,165,165,-107,-108,113,-242,298,53,113,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,165,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,165,-187,-188,-193,-194,-195,-97,-156,-190,216,-100,336,-24,113,113,351,353,358,359,360,361,208,165,113,-98,165,165,-174,-175,-176,-177,165,-196,-197,-198,-142,-101,-102,-103,-104,385,-183,394,416,394,165,429,385,-184,165,-163,165,-165,165,336,298,485,165,394,491,494,298,503,-185,-166,-164,-167,-105,-106,-115,521,298,385,385,165,547,494,494,494,494,494,494,494,385,494,578,494,298,]),'R_FROM':([21,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,125,132,135,155,156,159,165,166,168,172,182,183,209,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,237,239,240,241,242,245,246,247,248,249,251,252,253,260,265,266,267,268,269,270,271,307,308,314,315,316,317,318,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,557,569,],[56,56,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-261,56,-257,-168,-169,-191,-199,-149,-148,-189,-107,-108,-260,-262,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,313,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,331,-109,-110,-111,-112,-113,-114,-256,-98,379,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,568,577,]),'R_DISTINCT':([24,153,238,536,558,],[60,237,314,557,569,]),'O_PRODUCTO':([24,60,66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,136,163,165,166,168,174,176,182,183,216,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,252,255,260,261,263,264,308,312,320,324,327,328,329,330,367,374,378,380,439,440,441,442,443,444,],[62,62,-199,140,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,217,140,-199,-149,-148,140,262,-107,-108,-200,-99,140,140,140,-137,-138,-139,-140,140,140,140,140,140,140,140,140,-156,140,-100,140,140,140,-98,140,140,-142,-101,-102,-103,-104,140,140,140,140,140,140,140,-105,-106,-115,]),'R_CASE':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'O_RESTA':([24,60,66,67,69,70,71,73,74,75,76,77,78,79,81,82,83,84,85,86,87,93,95,96,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,163,165,166,167,168,171,173,174,176,177,178,182,183,216,219,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,243,244,252,255,260,261,263,264,301,308,309,312,313,319,320,324,327,328,329,330,362,367,374,377,378,379,380,381,419,439,440,441,442,443,444,512,],[71,71,-199,139,71,71,71,-150,-151,-152,-153,-154,-155,71,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,139,-199,-149,71,-148,71,71,139,71,71,71,-107,-108,-200,-99,139,-135,-136,-137,-138,-139,-140,139,71,139,139,139,139,139,139,139,71,-156,139,-100,139,139,139,71,-98,71,139,71,71,139,-142,-101,-102,-103,-104,71,139,139,71,139,71,139,71,71,139,139,139,-105,-106,-115,71,]),'O_SUMA':([24,60,66,67,69,70,71,73,74,75,76,77,78,79,81,82,83,84,85,86,87,93,95,96,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,163,165,166,167,168,171,173,174,176,177,178,182,183,216,219,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,243,244,252,255,260,261,263,264,301,308,309,312,313,319,320,324,327,328,329,330,362,367,374,377,378,379,380,381,419,439,440,441,442,443,444,512,],[70,70,-199,138,70,70,70,-150,-151,-152,-153,-154,-155,70,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,138,-199,-149,70,-148,70,70,138,70,70,70,-107,-108,-200,-99,138,-135,-136,-137,-138,-139,-140,138,70,138,138,138,138,138,138,138,70,-156,138,-100,138,138,138,70,-98,70,138,70,70,138,-142,-101,-102,-103,-104,70,138,138,70,138,70,138,70,70,138,138,138,-105,-106,-115,70,]),'R_NOT':([24,60,66,67,69,73,74,75,76,77,78,79,81,82,83,84,85,86,87,93,95,96,106,128,134,153,157,158,160,161,163,165,166,168,171,173,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,420,442,443,444,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,512,515,516,517,518,520,521,524,536,549,575,],[79,79,-199,146,79,-150,-151,-152,-153,-154,-155,79,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,188,79,79,238,79,79,250,79,146,-199,-149,-148,79,79,146,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-53,462,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,462,-105,-106,-115,462,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,79,-81,-88,-89,-91,-93,-94,-70,558,-79,-92,]),'INTEGER':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,258,301,309,313,319,326,362,372,373,377,379,381,415,419,424,461,469,484,506,508,511,512,530,531,532,533,534,535,548,550,560,568,577,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,433,437,81,81,81,483,81,495,81,81,526,542,543,545,81,495,495,495,495,495,495,495,81,542,495,495,]),'STRING':([24,41,46,47,48,49,53,60,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,95,96,98,99,100,105,107,111,117,119,124,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,155,156,157,158,159,161,165,166,167,168,171,172,173,176,177,178,180,182,183,189,202,215,216,217,219,221,222,223,224,225,226,227,230,231,232,233,234,235,236,239,240,241,242,244,245,246,247,248,249,251,252,253,258,260,275,278,279,301,302,308,309,313,315,316,317,318,319,321,322,323,324,326,327,328,329,330,333,344,362,375,377,378,379,380,381,387,388,389,390,418,419,424,438,439,440,441,442,443,444,461,469,512,530,531,532,533,534,535,548,550,568,577,],[82,-25,114,114,-243,-243,114,82,114,-258,-199,-95,-96,82,82,82,-150,-151,-152,-153,-154,-155,82,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,182,183,114,-25,191,114,114,114,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-168,-169,82,82,-191,82,-199,-149,82,-148,82,-189,82,82,82,82,272,-107,-108,114,-242,114,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,82,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,82,-187,-188,-193,-194,-195,-97,-156,-190,82,-100,-24,114,114,82,114,-98,82,82,-174,-175,-176,-177,82,-196,-197,-198,-142,82,-101,-102,-103,-104,-183,417,82,-184,82,-163,82,-165,82,445,446,447,448,486,82,496,-185,-166,-164,-167,-105,-106,-115,82,82,82,496,496,496,496,496,496,496,82,496,496,]),'DECIMAL':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,258,301,309,313,319,326,362,377,379,381,419,424,461,469,512,530,531,532,533,534,535,548,550,568,577,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,497,83,83,83,497,497,497,497,497,497,497,83,497,497,]),'CHARACTER':([24,41,46,47,48,49,53,60,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,95,96,98,105,107,117,119,124,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,155,156,157,158,159,161,165,166,167,168,171,172,173,176,177,178,182,183,189,202,215,216,217,219,221,222,223,224,225,226,227,230,231,232,233,234,235,236,239,240,241,242,244,245,246,247,248,249,251,252,253,258,260,275,278,279,301,302,308,309,313,315,316,317,318,319,321,322,323,324,326,327,328,329,330,333,362,375,377,378,379,380,381,419,424,438,439,440,441,442,443,444,461,469,512,530,531,532,533,534,535,548,550,568,577,],[84,-25,115,115,-243,-243,115,84,115,-258,-199,-95,-96,84,84,84,-150,-151,-152,-153,-154,-155,84,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,115,-25,115,115,115,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-168,-169,84,84,-191,84,-199,-149,84,-148,84,-189,84,84,84,84,-107,-108,115,-242,115,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,84,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,84,-187,-188,-193,-194,-195,-97,-156,-190,84,-100,-24,115,115,84,115,-98,84,84,-174,-175,-176,-177,84,-196,-197,-198,-142,84,-101,-102,-103,-104,-183,84,-184,84,-163,84,-165,84,84,498,-185,-166,-164,-167,-105,-106,-115,84,84,84,498,498,498,498,498,498,498,84,498,498,]),'R_TRUE':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,157,158,160,161,167,171,173,176,177,178,230,238,244,250,258,301,309,313,319,326,362,377,379,381,419,424,461,469,512,530,531,532,533,534,535,548,550,568,577,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,240,85,85,85,247,85,85,85,85,85,85,85,85,316,85,321,85,85,85,85,85,85,85,85,85,85,85,499,85,85,85,499,499,499,499,499,499,499,85,499,499,]),'R_FALSE':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,157,158,160,161,167,171,173,176,177,178,230,238,244,250,258,301,309,313,319,326,362,377,379,381,419,424,461,469,512,530,531,532,533,534,535,548,550,568,577,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,241,86,86,86,248,86,86,86,86,86,86,86,86,317,86,322,86,86,86,86,86,86,86,86,86,86,86,500,86,86,86,500,500,500,500,500,500,500,86,500,500,]),'R_NULL':([24,60,69,70,71,79,81,82,83,84,85,86,87,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,157,158,161,167,171,173,176,177,178,230,238,244,258,301,309,313,319,326,362,377,379,381,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,419,420,454,455,456,457,458,459,460,461,462,463,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,512,515,516,517,518,520,521,524,549,550,575,],[87,87,87,87,87,87,-126,-127,-128,-129,-130,-131,-132,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,239,87,87,87,87,87,87,87,87,87,87,87,315,87,87,87,87,87,87,87,87,87,87,87,-53,463,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,87,463,463,-82,-83,-84,-85,-86,-87,87,517,-90,-58,-65,87,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,87,-81,-88,-89,-91,-93,-94,-70,-79,87,-92,]),'R_NOW':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,332,362,377,379,381,419,512,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,391,88,88,88,88,88,88,]),'R_COUNT':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'R_SUM':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'R_PROM':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'R_EXTRACT':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'R_DATE_PART':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'R_CURRENT_DATE':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'R_CURRENT_TIME':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'R_EXISTS':([24,60,69,79,118,128,134,157,158,161,171,173,188,512,],[97,97,97,97,202,97,97,97,97,97,97,97,275,97,]),'R_TIMESTAMP':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,331,332,336,353,362,377,379,381,419,421,512,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,387,404,404,99,99,99,99,99,404,99,]),'R_INTERVAL':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,331,332,336,353,362,377,379,381,419,421,512,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,390,412,412,100,100,100,100,100,412,100,]),'R_ALL':([36,37,38,372,],[102,102,102,434,]),'R_IF':([41,43,48,49,107,],[106,106,118,118,106,]),'R_REPLACE':([44,],[109,]),'R_LIKE':([45,],[111,]),'S_PARDER':([51,53,61,62,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,121,123,125,126,129,130,133,135,137,155,156,159,162,163,164,165,166,168,172,175,182,183,184,185,186,209,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,255,260,261,262,263,264,273,297,298,303,304,305,307,308,310,315,316,317,318,321,322,323,324,327,328,329,330,333,334,335,337,338,339,340,369,370,371,374,375,376,378,380,383,384,385,386,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,428,429,430,431,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,452,453,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,482,487,491,492,494,495,496,497,498,499,500,502,505,507,509,510,513,515,516,517,518,520,521,522,523,524,525,529,537,538,539,540,541,542,543,544,545,546,547,549,551,552,553,554,555,556,561,562,563,564,566,567,571,572,574,575,576,579,580,581,583,584,],[121,-262,-251,-254,-255,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-249,-265,-261,210,-250,-264,-283,-257,219,-168,-169,-191,251,252,253,-199,-149,-148,-189,260,-107,-108,-246,-247,-248,-260,-282,-283,-285,-262,-200,-259,308,-99,-134,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,252,-100,327,328,329,330,333,363,-52,-263,-285,-306,-256,-98,375,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,392,-37,-39,-40,-41,-42,-266,-306,-293,-133,-184,438,-163,-165,442,443,-199,444,-53,-44,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,504,-51,-293,-245,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-116,-117,-118,-119,513,-36,-38,-43,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,525,527,528,529,-209,-210,-211,-212,-213,-214,-215,538,-244,-304,-305,-284,-120,-81,-88,-89,-91,-93,-94,549,-125,-70,-46,-45,559,-47,-292,-295,-300,-300,-307,-286,-287,-290,565,-79,-201,-202,-203,-204,-205,-206,-303,-298,-299,-303,575,-124,-294,-296,-297,-92,-207,-301,-302,-208,584,-48,]),'R_SET':([52,53,113,114,115,123,125,209,351,369,],[122,-262,-14,-15,-16,-265,-261,-260,420,-266,]),'R_AS':([53,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,155,156,159,165,166,168,172,182,183,190,210,215,216,217,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,308,315,316,317,318,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,],[124,124,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-168,-169,-191,-199,-149,-148,-189,-107,-108,277,302,124,-200,-259,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,]),'S_COMA':([53,63,64,65,66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,123,125,129,130,135,155,156,159,165,166,168,172,182,183,196,197,206,207,209,215,216,217,218,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,251,252,253,260,272,280,283,285,286,287,291,294,297,298,303,307,308,315,316,317,318,321,322,323,324,327,328,329,330,333,334,335,337,338,339,340,352,359,360,365,366,367,368,369,374,375,378,380,385,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,422,428,429,435,436,437,438,439,440,441,442,443,444,452,453,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,482,487,488,489,490,502,503,515,516,517,518,520,521,522,523,524,525,528,529,537,538,539,540,541,542,544,545,549,561,562,563,564,567,571,572,574,575,579,580,583,584,],[-262,134,-262,-258,-199,-95,-96,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-265,-261,212,-264,-257,-168,-169,-191,-199,-149,-148,-189,-107,-108,282,-224,300,-314,-260,-262,-200,-259,309,-99,-134,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-97,-156,-190,-100,332,-226,-225,-230,-231,-232,-227,-228,364,-52,-263,-256,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,393,-37,-39,-40,-41,-42,-223,-237,-238,-313,-315,-316,-317,-266,-133,-184,-163,-165,-199,-53,-44,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,-229,309,-51,511,-288,-289,-185,-166,-164,-167,-105,-106,-115,-36,-38,-43,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,364,309,-234,-235,-236,364,-239,-81,-88,-89,-91,-93,-94,550,-125,-70,-46,-233,-45,364,-47,560,-295,-300,-300,-286,-287,-79,-303,-298,-299,-303,-124,-294,-296,-297,-92,-301,-302,364,-48,]),'R_WHERE':([53,55,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,113,114,115,123,125,129,130,133,165,166,168,182,183,206,207,209,213,216,219,221,222,223,224,225,226,227,252,260,303,308,324,327,328,329,330,365,366,367,368,369,442,443,444,],[-262,128,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-14,-15,-16,-265,-261,-250,-264,128,-199,-149,-148,-107,-108,128,-314,-260,128,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-263,-98,-142,-101,-102,-103,-104,-313,-315,-316,-317,-266,-105,-106,-115,]),'R_GROUP':([53,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,123,125,129,130,133,155,156,159,165,166,168,172,182,183,209,211,213,214,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,260,303,304,308,315,316,317,318,321,322,323,324,327,328,329,330,333,369,375,378,380,438,439,440,441,442,443,444,],[-262,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-265,-261,-250,-264,-283,-168,-169,-191,-199,-149,-148,-189,-107,-108,-260,-282,-283,306,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-156,-190,-100,-263,306,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,]),'R_LIMIT':([53,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,123,125,129,130,133,155,156,159,165,166,168,172,182,183,209,211,213,214,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,260,303,304,305,308,315,316,317,318,321,322,323,324,327,328,329,330,333,369,370,375,378,380,385,435,436,437,438,439,440,441,442,443,444,510,544,545,546,],[-262,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-265,-261,-250,-264,-283,-168,-169,-191,-199,-149,-148,-189,-107,-108,-260,-282,-283,-285,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-156,-190,-100,-263,-285,372,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,372,-184,-163,-165,-199,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-284,-286,-287,-290,]),'R_ORDER':([53,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,113,114,115,123,125,129,130,133,155,156,159,165,166,168,172,182,183,209,211,213,214,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,260,303,304,305,308,315,316,317,318,321,322,323,324,327,328,329,330,333,369,370,371,375,378,380,385,430,433,434,435,436,437,438,439,440,441,442,443,444,507,509,510,543,544,545,546,],[-262,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-14,-15,-16,-265,-261,-250,-264,-283,-168,-169,-191,-199,-149,-148,-189,-107,-108,-260,-282,-283,-285,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-156,-190,-100,-263,-285,-306,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-266,-306,432,-184,-163,-165,-199,432,-308,-308,-291,-288,-289,-185,-166,-164,-167,-105,-106,-115,-304,-305,-284,-307,-286,-287,-290,]),'S_PUNTO':([66,165,385,],[136,254,254,]),'O_DIVISION':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,252,255,260,261,263,264,308,312,320,324,327,328,329,330,367,374,378,380,439,440,441,442,443,444,],[-199,141,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,141,-199,-149,-148,141,-107,-108,-200,-99,141,141,141,-137,-138,-139,-140,141,141,141,141,141,141,141,141,-156,141,-100,141,141,141,-98,141,141,-142,-101,-102,-103,-104,141,141,141,141,141,141,141,-105,-106,-115,]),'O_EXPONENTE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,252,255,260,261,263,264,308,312,320,324,327,328,329,330,367,374,378,380,439,440,441,442,443,444,],[-199,142,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,142,-199,142,142,142,-107,-108,-200,-99,142,142,142,142,142,-139,142,142,142,142,142,142,142,142,142,-156,142,-100,142,142,142,-98,142,142,-142,-101,-102,-103,-104,142,142,142,142,142,142,142,-105,-106,-115,]),'O_MODULAR':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,252,255,260,261,263,264,308,312,320,324,327,328,329,330,367,374,378,380,439,440,441,442,443,444,],[-199,143,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,143,-199,-149,-148,143,-107,-108,-200,-99,143,143,143,-137,-138,-139,-140,143,143,143,143,143,143,143,143,-156,143,-100,143,143,143,-98,143,143,-142,-101,-102,-103,-104,143,143,143,143,143,143,143,-105,-106,-115,]),'OC_CONCATENAR':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,252,255,260,261,263,264,308,312,320,324,327,328,329,330,367,374,378,380,439,440,441,442,443,444,],[-199,144,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,144,-199,-149,-148,144,-107,-108,-200,-99,144,-135,-136,-137,-138,-139,-140,-141,144,144,144,144,144,144,144,-156,144,-100,144,144,144,-98,144,144,-142,-101,-102,-103,-104,144,144,144,144,144,144,144,-105,-106,-115,]),'R_IN':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,146,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,],[-199,145,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,229,145,-199,-149,-148,145,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,]),'OL_MENORQUE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,493,494,495,496,497,498,499,500,],[-199,147,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,147,-199,-149,-148,147,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,530,-209,-210,-211,-212,-213,-214,-215,]),'OL_MAYORQUE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,493,494,495,496,497,498,499,500,],[-199,148,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,148,-199,-149,-148,148,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,531,-209,-210,-211,-212,-213,-214,-215,]),'OL_MAYORIGUALQUE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,493,494,495,496,497,498,499,500,],[-199,149,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,149,-199,-149,-148,149,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,532,-209,-210,-211,-212,-213,-214,-215,]),'OL_MENORIGUALQUE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,493,494,495,496,497,498,499,500,],[-199,150,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,150,-199,-149,-148,150,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,533,-209,-210,-211,-212,-213,-214,-215,]),'S_IGUAL':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,208,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,344,415,442,443,444,493,494,495,496,497,498,499,500,],[-199,151,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,151,-199,-149,-148,151,-107,-108,301,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,418,484,-105,-106,-115,534,-209,-210,-211,-212,-213,-214,-215,]),'OL_DISTINTODE':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,493,494,495,496,497,498,499,500,],[-199,152,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,152,-199,-149,-148,152,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,535,-209,-210,-211,-212,-213,-214,-215,]),'R_IS':([66,67,68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,155,156,159,163,164,165,166,168,172,174,182,183,211,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,259,260,308,315,316,317,318,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,493,494,495,496,497,498,499,500,546,],[-199,153,160,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-168,-169,-191,153,160,-199,-149,-148,160,153,-107,-108,160,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,160,160,-193,-194,-195,-156,-190,160,-100,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,536,-209,-210,-211,-212,-213,-214,-215,160,]),'R_BETWEEN':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,146,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,],[-199,154,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,230,154,-199,-149,-148,154,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,]),'R_ISNULL':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,],[-199,155,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,155,-199,-149,-148,155,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,]),'R_NOTNULL':([66,67,73,74,75,76,77,78,81,82,83,84,85,86,87,93,95,96,163,165,166,168,174,182,183,216,219,221,222,223,224,225,226,227,252,260,308,324,327,328,329,330,442,443,444,],[-199,156,-150,-151,-152,-153,-154,-155,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,156,-199,-149,-148,156,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-156,-100,-98,-142,-101,-102,-103,-104,-105,-106,-115,]),'R_AND':([68,73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,155,156,159,164,165,166,168,172,182,183,211,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,243,245,246,247,248,249,252,253,259,260,308,312,315,316,317,318,320,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,546,],[157,-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-168,-169,-191,157,-199,-149,-148,157,-107,-108,157,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,319,-187,-188,-193,-194,-195,-156,-190,157,-100,-98,377,-174,-175,-176,-177,381,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,157,]),'R_WHEN':([72,81,82,83,84,85,86,87,169,170,257,382,],[171,-126,-127,-128,-129,-130,-131,-132,171,-144,-143,-145,]),'R_THEN':([73,74,75,76,77,78,80,81,82,83,84,85,86,87,93,95,96,98,155,156,159,165,166,168,172,182,183,216,219,221,222,223,224,225,226,227,231,232,233,234,235,236,239,240,241,242,245,246,247,248,249,252,253,259,260,308,315,316,317,318,321,322,323,324,327,328,329,330,333,375,378,380,438,439,440,441,442,443,444,],[-150,-151,-152,-153,-154,-155,-192,-126,-127,-128,-129,-130,-131,-132,-123,-121,-122,-186,-168,-169,-191,-199,-149,-148,-189,-107,-108,-200,-99,-135,-136,-137,-138,-139,-140,-141,-157,-158,-159,-160,-161,-162,-170,-171,-172,-173,-187,-188,-193,-194,-195,-156,-190,326,-100,-98,-174,-175,-176,-177,-196,-197,-198,-142,-101,-102,-103,-104,-183,-184,-163,-165,-185,-166,-164,-167,-105,-106,-115,]),'R_END':([81,82,83,84,85,86,87,169,170,256,257,325,382,],[-126,-127,-128,-129,-130,-131,-132,-147,-144,324,-143,-146,-145,]),'R_ELSE':([81,82,83,84,85,86,87,169,170,257,382,],[-126,-127,-128,-129,-130,-131,-132,258,-144,-143,-145,]),'R_DEFAULT':([81,82,83,84,85,86,87,301,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,420,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,575,],[-126,-127,-128,-129,-130,-131,-132,368,-53,461,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,461,461,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,-92,]),'R_PRIMARY':([81,82,83,84,85,86,87,198,274,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,575,],[-126,-127,-128,-129,-130,-131,-132,289,289,289,-53,465,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,465,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,-92,]),'R_REFERENCES':([81,82,83,84,85,86,87,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,559,575,],[-126,-127,-128,-129,-130,-131,-132,-53,466,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,466,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,570,-92,]),'R_CONSTRAINT':([81,82,83,84,85,86,87,198,199,274,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,454,455,456,457,458,459,460,463,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,575,],[-126,-127,-128,-129,-130,-131,-132,290,292,290,290,-53,290,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,290,-82,-83,-84,-85,-86,-87,-90,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,-92,]),'R_UNIQUE':([81,82,83,84,85,86,87,198,274,288,358,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,454,455,456,457,458,459,460,463,464,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,575,],[-126,-127,-128,-129,-130,-131,-132,-50,342,354,-49,342,-53,-50,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,-50,-82,-83,-84,-85,-86,-87,-90,518,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,-92,]),'R_CHECK':([81,82,83,84,85,86,87,198,274,288,341,358,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,454,455,456,457,458,459,460,463,464,467,468,470,471,472,473,474,475,476,477,478,479,480,481,515,516,517,518,520,521,524,549,575,],[-126,-127,-128,-129,-130,-131,-132,-50,-50,355,355,-49,-50,-53,-50,-54,-55,-56,-57,-59,-60,-61,-62,-63,-64,-80,-80,-80,-80,-80,-78,-50,-82,-83,-84,-85,-86,-87,-90,519,-58,-65,-66,-67,-68,-80,-69,-71,-72,-73,-74,-75,-76,-77,-81,-88,-89,-91,-93,-94,-70,-79,-92,]),'R_RENAME':([112,113,114,115,116,282,],[193,-14,-15,-16,200,200,]),'R_OWNER':([112,113,114,115,276,],[194,-14,-15,-16,344,]),'R_ADD':([113,114,115,116,282,],[-14,-15,-16,198,198,]),'R_MODE':([113,114,115,276,343,416,417,485,486,],[-14,-15,-16,-32,415,-28,-29,-30,-31,]),'R_VALUES':([120,204,363,],[-311,296,-310,]),'R_UNKNOWN':([153,160,238,250,],[242,249,318,323,]),'R_SYMMETRIC':([154,],[244,]),'R_YEAR':([179,412,],[266,476,]),'R_MONTH':([179,412,],[267,477,]),'R_DAY':([179,412,],[268,478,]),'R_HOUR':([179,412,],[269,479,]),'R_MINUTE':([179,412,],[270,480,]),'R_SECOND':([179,412,],[271,481,]),'R_TO':([193,194,361,],[278,279,427,]),'R_COLUMN':([195,198,199,200,],[281,284,293,295,]),'R_FOREIGN':([198,274,288,341,358,393,],[-50,-50,356,356,-49,-50,]),'R_HAVING':([216,385,435,436,437,544,545,],[-200,-199,512,-288,-289,-286,-287,]),'R_ASC':([216,385,541,542,],[-200,-199,562,562,]),'R_DESC':([216,385,541,542,],[-200,-199,563,563,]),'R_NULLS':([216,385,541,542,561,562,563,564,],[-200,-199,-300,-300,573,-298,-299,573,]),'R_ENUM':([277,],[345,]),'R_CURRENT_USER':([279,],[349,]),'R_SESSION_USER':([279,],[350,]),'R_KEY':([289,356,465,],[357,425,520,]),'R_BY':([306,432,],[373,506,]),'T_DATE':([332,336,353,421,],[388,405,405,405,]),'T_TIME':([332,336,353,421,],[389,406,406,406,]),'T_SMALLINT':([336,353,421,],[396,396,396,]),'T_INTEGER':([336,353,421,],[397,397,397,]),'T_BIGINT':([336,353,421,],[398,398,398,]),'T_REAL':([336,353,421,],[399,399,399,]),'T_DOUBLE':([336,353,421,],[400,400,400,]),'T_MONEY':([336,353,421,],[401,401,401,]),'T_TEXT':([336,353,421,],[402,402,402,]),'T_BOOLEAN':([336,353,421,],[403,403,403,]),'T_DECIMAL':([336,353,421,],[407,407,407,]),'T_NUMERIC':([336,353,421,],[408,408,408,]),'T_VARCHAR':([336,353,421,],[409,409,409,]),'T_CHARACTER':([336,353,421,],[410,410,410,]),'T_CHAR':([336,353,421,],[411,411,411,]),'R_INHERITS':([392,],[451,]),'T_PRECISION':([400,],[467,]),'T_VARYING':([410,],[473,]),'R_OFFSET':([433,434,],[508,508,]),'R_FIRST':([573,],[579,]),'R_LAST':([573,],[580,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'stmtList':([0,],[2,]),'stmt':([0,2,],[3,25,]),'createStmt':([0,2,],[4,4,]),'showStmt':([0,2,],[5,5,]),'alterStmt':([0,2,],[6,6,]),'dropStmt':([0,2,],[7,7,]),'insertStmt':([0,2,],[8,8,]),'updateStmt':([0,2,],[9,9,]),'deleteStmt':([0,2,],[10,10,]),'truncateStmt':([0,2,],[11,11,]),'useStmt':([0,2,],[12,12,]),'selectStmt':([0,2,19,54,69,101,103,104,161,181,228,311,],[13,13,51,126,162,184,185,186,51,273,310,376,]),'createBody':([14,],[39,]),'createOpts':([14,],[40,]),'orReplace':([14,],[42,]),'fromBody':([20,56,212,],[52,130,303,]),'fromCl':([21,61,132,],[55,133,213,]),'tableOpt':([22,],[57,]),'selectParams':([24,60,],[61,132,]),'selectList':([24,60,],[63,63,]),'selectListParams':([24,60,134,],[64,64,215,]),'expresion':([24,60,134,],[65,65,65,]),'datatype':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[67,67,163,166,168,174,174,67,220,221,222,223,224,225,226,227,231,232,233,234,235,236,243,174,174,163,255,174,163,261,263,264,312,320,367,374,378,380,220,439,440,441,220,174,]),'expBool':([24,60,69,79,128,134,157,158,161,171,173,512,],[68,68,164,172,211,68,245,246,164,259,164,546,]),'columnName':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,331,362,373,377,379,381,419,506,511,512,560,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,384,73,436,73,73,73,73,541,544,73,541,]),'literal':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,258,301,309,313,319,326,362,377,379,381,419,461,469,512,550,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,325,74,74,74,74,382,74,74,74,74,74,516,523,74,567,]),'funcCall':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'extract':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'datePart':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'current':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,362,377,379,381,419,512,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'boolean':([24,60,69,79,128,134,157,158,161,171,173,512,],[80,80,80,80,80,80,80,80,80,80,80,80,]),'timeStamp':([24,60,69,70,71,79,128,134,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,157,158,161,167,171,173,176,177,178,230,244,301,309,313,319,331,362,377,379,381,419,512,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,383,93,93,93,93,93,93,]),'expComp':([24,60,69,79,128,134,157,158,161,171,173,512,],[98,98,98,98,98,98,98,98,98,98,98,98,]),'allOpt':([36,37,38,],[101,103,104,]),'ifNotExists':([41,43,107,],[105,108,189,]),'likeOpt':([45,],[110,]),'idOrString':([46,47,53,64,105,117,119,124,189,215,278,279,302,],[112,116,125,125,187,201,203,209,276,125,346,348,369,]),'ifExists':([48,49,],[117,119,]),'optAlias':([53,64,215,],[123,135,307,]),'whereCl':([55,133,206,213,],[127,214,299,304,]),'tableExp':([56,],[129,]),'optBoolPredicate':([68,164,172,211,245,246,259,546,],[159,159,159,159,159,159,159,159,]),'caseList':([72,],[169,]),'caseWhen':([72,169,],[170,257,]),'alterDb':([112,],[192,]),'alterTableList':([116,],[196,]),'alterTable':([116,282,],[197,352,]),'paramsColumn':([120,],[204,]),'updateCols':([122,],[206,]),'updateVals':([122,300,],[207,365,]),'paramsList':([137,362,419,],[218,428,487,]),'optElse':([169,],[256,]),'optsExtract':([179,],[265,]),'alterAlter':([195,],[280,]),'alterAdd':([198,],[283,]),'createConstraint':([198,274,393,],[285,337,337,]),'createPrimary':([198,274,393,],[286,339,339,]),'createForeign':([198,274,393,],[287,340,340,]),'constrName':([198,274,393,395,454,],[288,341,341,464,464,]),'alterDrop':([199,],[291,]),'alterRename':([200,],[294,]),'idList':([205,413,426,501,582,],[297,482,502,537,583,]),'groupByCl':([214,304,],[305,370,]),'createTableList':([274,],[334,]),'createTable':([274,393,],[335,452,]),'createUnique':([274,393,],[338,338,]),'createOwner':([276,],[343,]),'ownerOPts':([279,],[347,]),'updateExp':([301,],[366,]),'limitCl':([305,370,],[371,430,]),'dateSource':([332,],[386,]),'types':([336,353,421,],[395,422,490,]),'createMode':([343,],[414,]),'orderByCl':([371,430,],[431,505,]),'groupList':([373,],[435,]),'inheritsOpt':([392,],[450,]),'createColumns':([395,],[453,]),'colOptionsList':([395,],[454,]),'colOptions':([395,454,],[455,515,]),'defaultVal':([395,420,454,],[456,489,456,]),'nullOpt':([395,420,454,],[457,488,457,]),'constraintOpt':([395,454,],[458,458,]),'primaryOpt':([395,454,],[459,459,]),'referencesOpt':([395,454,],[460,460,]),'optParams':([407,408,409,410,411,473,],[468,470,471,472,474,524,]),'intervalFields':([412,],[475,]),'booleanCheck':([424,548,],[492,566,]),'idOrLiteral':([424,530,531,532,533,534,535,548,568,577,],[493,551,552,553,554,555,556,493,576,581,]),'offsetLimit':([433,434,],[507,509,]),'havingCl':([435,],[510,]),'literalList':([469,],[522,]),'orderList':([506,],[539,]),'orderByElem':([506,560,],[540,571,]),'orderOpts':([541,542,],[561,564,]),'orderNull':([561,564,],[572,574,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> stmtList','init',1,'p_init','grammar.py',51),
  ('stmtList -> stmtList stmt','stmtList',2,'p_stmt_list','grammar.py',57),
  ('stmtList -> stmt','stmtList',1,'p_stmt_u','grammar.py',64),
  ('stmt -> createStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',71),
  ('stmt -> showStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',72),
  ('stmt -> alterStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',73),
  ('stmt -> dropStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',74),
  ('stmt -> insertStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',75),
  ('stmt -> updateStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',76),
  ('stmt -> deleteStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',77),
  ('stmt -> truncateStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',78),
  ('stmt -> useStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',79),
  ('stmt -> selectStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',80),
  ('idOrString -> ID','idOrString',1,'p_id_string','grammar.py',94),
  ('idOrString -> STRING','idOrString',1,'p_id_string','grammar.py',95),
  ('idOrString -> CHARACTER','idOrString',1,'p_id_string','grammar.py',96),
  ('createStmt -> R_CREATE createBody','createStmt',2,'p_createstmt','grammar.py',103),
  ('createBody -> createOpts','createBody',1,'p_createbody','grammar.py',110),
  ('createOpts -> R_TABLE ifNotExists idOrString S_PARIZQ createTableList S_PARDER inheritsOpt','createOpts',7,'p_createopts_table','grammar.py',117),
  ('createOpts -> orReplace R_DATABASE ifNotExists idOrString createOwner createMode','createOpts',6,'p_createopts_db','grammar.py',126),
  ('orReplace -> R_OR R_REPLACE','orReplace',2,'p_replace_true','grammar.py',136),
  ('orReplace -> <empty>','orReplace',0,'p_replace_false','grammar.py',144),
  ('createOpts -> R_TYPE ifNotExists ID R_AS R_ENUM S_PARIZQ paramsList S_PARDER','createOpts',8,'p_createopts_type','grammar.py',152),
  ('ifNotExists -> R_IF R_NOT R_EXISTS','ifNotExists',3,'p_ifnotexists_true','grammar.py',162),
  ('ifNotExists -> <empty>','ifNotExists',0,'p_ifnotexists_false','grammar.py',170),
  ('inheritsOpt -> R_INHERITS S_PARIZQ ID S_PARDER','inheritsOpt',4,'p_inheritsOpt','grammar.py',178),
  ('inheritsOpt -> <empty>','inheritsOpt',0,'p_inheritsOpt_none','grammar.py',186),
  ('createOwner -> R_OWNER ID','createOwner',2,'p_createowner','grammar.py',194),
  ('createOwner -> R_OWNER STRING','createOwner',2,'p_createowner','grammar.py',195),
  ('createOwner -> R_OWNER S_IGUAL ID','createOwner',3,'p_createowner_asg','grammar.py',203),
  ('createOwner -> R_OWNER S_IGUAL STRING','createOwner',3,'p_createowner_asg','grammar.py',204),
  ('createOwner -> <empty>','createOwner',0,'p_createowner_none','grammar.py',212),
  ('createMode -> R_MODE INTEGER','createMode',2,'p_createmode','grammar.py',220),
  ('createMode -> R_MODE S_IGUAL INTEGER','createMode',3,'p_createMode_asg','grammar.py',228),
  ('createMode -> <empty>','createMode',0,'p_createmode_none','grammar.py',236),
  ('createTableList -> createTableList S_COMA createTable','createTableList',3,'p_createtable_list','grammar.py',243),
  ('createTableList -> createTable','createTableList',1,'p_createtable_u','grammar.py',250),
  ('createTable -> ID types createColumns','createTable',3,'p_createTable_id','grammar.py',257),
  ('createTable -> createConstraint','createTable',1,'p_createTable','grammar.py',265),
  ('createTable -> createUnique','createTable',1,'p_createTable','grammar.py',266),
  ('createTable -> createPrimary','createTable',1,'p_createTable','grammar.py',267),
  ('createTable -> createForeign','createTable',1,'p_createTable','grammar.py',268),
  ('createColumns -> colOptionsList','createColumns',1,'p_createColumNs','grammar.py',276),
  ('createColumns -> <empty>','createColumns',0,'p_createColumNs_none','grammar.py',284),
  ('createConstraint -> constrName R_CHECK S_PARIZQ booleanCheck S_PARDER','createConstraint',5,'p_createConstraint','grammar.py',291),
  ('createUnique -> R_UNIQUE S_PARIZQ idList S_PARDER','createUnique',4,'p_createUnique','grammar.py',297),
  ('createPrimary -> R_PRIMARY R_KEY S_PARIZQ idList S_PARDER','createPrimary',5,'p_createPrimary','grammar.py',303),
  ('createForeign -> constrName R_FOREIGN R_KEY S_PARIZQ idList S_PARDER R_REFERENCES ID S_PARIZQ idList S_PARDER','createForeign',11,'p_createForeign','grammar.py',310),
  ('constrName -> R_CONSTRAINT ID','constrName',2,'p_constrName','grammar.py',318),
  ('constrName -> <empty>','constrName',0,'p_constrName_none','grammar.py',326),
  ('idList -> idList S_COMA ID','idList',3,'p_id_list','grammar.py',333),
  ('idList -> ID','idList',1,'p_id_u','grammar.py',340),
  ('types -> ID','types',1,'p_types','grammar.py',347),
  ('types -> T_SMALLINT','types',1,'p_types_simple','grammar.py',355),
  ('types -> T_INTEGER','types',1,'p_types_simple','grammar.py',356),
  ('types -> T_BIGINT','types',1,'p_types_simple','grammar.py',357),
  ('types -> T_REAL','types',1,'p_types_simple','grammar.py',358),
  ('types -> T_DOUBLE T_PRECISION','types',2,'p_types_simple','grammar.py',359),
  ('types -> T_MONEY','types',1,'p_types_simple','grammar.py',360),
  ('types -> T_TEXT','types',1,'p_types_simple','grammar.py',361),
  ('types -> T_BOOLEAN','types',1,'p_types_simple','grammar.py',362),
  ('types -> R_TIMESTAMP','types',1,'p_types_simple','grammar.py',363),
  ('types -> T_DATE','types',1,'p_types_simple','grammar.py',364),
  ('types -> T_TIME','types',1,'p_types_simple','grammar.py',365),
  ('types -> T_DECIMAL optParams','types',2,'p_types_params','grammar.py',374),
  ('types -> T_NUMERIC optParams','types',2,'p_types_params','grammar.py',375),
  ('types -> T_VARCHAR optParams','types',2,'p_types_params','grammar.py',376),
  ('types -> T_CHARACTER optParams','types',2,'p_types_params','grammar.py',377),
  ('types -> T_CHAR optParams','types',2,'p_types_params','grammar.py',378),
  ('types -> T_CHARACTER T_VARYING optParams','types',3,'p_types_var','grammar.py',386),
  ('types -> R_INTERVAL intervalFields','types',2,'p_timeType_interval','grammar.py',394),
  ('intervalFields -> R_YEAR','intervalFields',1,'p_intervalFields','grammar.py',402),
  ('intervalFields -> R_MONTH','intervalFields',1,'p_intervalFields','grammar.py',403),
  ('intervalFields -> R_DAY','intervalFields',1,'p_intervalFields','grammar.py',404),
  ('intervalFields -> R_HOUR','intervalFields',1,'p_intervalFields','grammar.py',405),
  ('intervalFields -> R_MINUTE','intervalFields',1,'p_intervalFields','grammar.py',406),
  ('intervalFields -> R_SECOND','intervalFields',1,'p_intervalFields','grammar.py',407),
  ('intervalFields -> <empty>','intervalFields',0,'p_intervalFields_none','grammar.py',415),
  ('optParams -> S_PARIZQ literalList S_PARDER','optParams',3,'p_optParams','grammar.py',422),
  ('optParams -> <empty>','optParams',0,'p_optParams_none','grammar.py',428),
  ('colOptionsList -> colOptionsList colOptions','colOptionsList',2,'p_colOptions_list','grammar.py',434),
  ('colOptionsList -> colOptions','colOptionsList',1,'p_colOptions_u','grammar.py',441),
  ('colOptions -> defaultVal','colOptions',1,'p_colOptions','grammar.py',448),
  ('colOptions -> nullOpt','colOptions',1,'p_colOptions','grammar.py',449),
  ('colOptions -> constraintOpt','colOptions',1,'p_colOptions','grammar.py',450),
  ('colOptions -> primaryOpt','colOptions',1,'p_colOptions','grammar.py',451),
  ('colOptions -> referencesOpt','colOptions',1,'p_colOptions','grammar.py',452),
  ('defaultVal -> R_DEFAULT literal','defaultVal',2,'p_defaultVal','grammar.py',460),
  ('nullOpt -> R_NOT R_NULL','nullOpt',2,'p_nullOpt_true','grammar.py',467),
  ('nullOpt -> R_NULL','nullOpt',1,'p_nullOpt_false','grammar.py',475),
  ('constraintOpt -> constrName R_UNIQUE','constraintOpt',2,'p_constraintOpt_unique','grammar.py',486),
  ('constraintOpt -> constrName R_CHECK S_PARIZQ booleanCheck S_PARDER','constraintOpt',5,'p_constraintOpt_check','grammar.py',494),
  ('primaryOpt -> R_PRIMARY R_KEY','primaryOpt',2,'p_primaryOpt','grammar.py',501),
  ('referencesOpt -> R_REFERENCES ID','referencesOpt',2,'p_referencesOpt','grammar.py',507),
  ('expresion -> datatype','expresion',1,'p_expresion','grammar.py',519),
  ('expresion -> expBool','expresion',1,'p_expresion','grammar.py',520),
  ('expresion -> S_PARIZQ selectStmt S_PARDER','expresion',3,'p_expresion_','grammar.py',528),
  ('funcCall -> ID S_PARIZQ paramsList S_PARDER','funcCall',4,'p_funcCall_1','grammar.py',536),
  ('funcCall -> ID S_PARIZQ S_PARDER','funcCall',3,'p_funcCall_2','grammar.py',544),
  ('funcCall -> R_NOW S_PARIZQ S_PARDER','funcCall',3,'p_funcCall_2','grammar.py',545),
  ('funcCall -> R_COUNT S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',553),
  ('funcCall -> R_COUNT S_PARIZQ O_PRODUCTO S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',554),
  ('funcCall -> R_SUM S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',555),
  ('funcCall -> R_PROM S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',556),
  ('extract -> R_EXTRACT S_PARIZQ optsExtract R_FROM timeStamp S_PARDER','extract',6,'p_extract_1','grammar.py',566),
  ('extract -> R_EXTRACT S_PARIZQ optsExtract R_FROM columnName S_PARDER','extract',6,'p_extract_2','grammar.py',577),
  ('timeStamp -> R_TIMESTAMP STRING','timeStamp',2,'p_timeStamp','grammar.py',587),
  ('timeStamp -> R_INTERVAL STRING','timeStamp',2,'p_timeStamp','grammar.py',588),
  ('optsExtract -> R_YEAR','optsExtract',1,'p_optsExtract','grammar.py',596),
  ('optsExtract -> R_MONTH','optsExtract',1,'p_optsExtract','grammar.py',597),
  ('optsExtract -> R_DAY','optsExtract',1,'p_optsExtract','grammar.py',598),
  ('optsExtract -> R_HOUR','optsExtract',1,'p_optsExtract','grammar.py',599),
  ('optsExtract -> R_MINUTE','optsExtract',1,'p_optsExtract','grammar.py',600),
  ('optsExtract -> R_SECOND','optsExtract',1,'p_optsExtract','grammar.py',601),
  ('datePart -> R_DATE_PART S_PARIZQ STRING S_COMA dateSource S_PARDER','datePart',6,'p_datePart','grammar.py',609),
  ('dateSource -> R_TIMESTAMP STRING','dateSource',2,'p_dateSource','grammar.py',619),
  ('dateSource -> T_DATE STRING','dateSource',2,'p_dateSource','grammar.py',620),
  ('dateSource -> T_TIME STRING','dateSource',2,'p_dateSource','grammar.py',621),
  ('dateSource -> R_INTERVAL STRING','dateSource',2,'p_dateSource','grammar.py',622),
  ('dateSource -> R_NOW S_PARIZQ S_PARDER','dateSource',3,'p_dateSource','grammar.py',623),
  ('current -> R_CURRENT_DATE','current',1,'p_current','grammar.py',631),
  ('current -> R_CURRENT_TIME','current',1,'p_current','grammar.py',632),
  ('current -> timeStamp','current',1,'p_current_1','grammar.py',641),
  ('literalList -> literalList S_COMA literal','literalList',3,'p_literal_list','grammar.py',648),
  ('literalList -> literal','literalList',1,'p_literal_u','grammar.py',655),
  ('literal -> INTEGER','literal',1,'p_literal','grammar.py',662),
  ('literal -> STRING','literal',1,'p_literal','grammar.py',663),
  ('literal -> DECIMAL','literal',1,'p_literal','grammar.py',664),
  ('literal -> CHARACTER','literal',1,'p_literal','grammar.py',665),
  ('literal -> R_TRUE','literal',1,'p_literal','grammar.py',666),
  ('literal -> R_FALSE','literal',1,'p_literal','grammar.py',667),
  ('literal -> R_NULL','literal',1,'p_literal','grammar.py',668),
  ('paramsList -> paramsList S_COMA datatype','paramsList',3,'p_params_list','grammar.py',686),
  ('paramsList -> datatype','paramsList',1,'p_params_u','grammar.py',693),
  ('datatype -> datatype O_SUMA datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',700),
  ('datatype -> datatype O_RESTA datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',701),
  ('datatype -> datatype O_PRODUCTO datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',702),
  ('datatype -> datatype O_DIVISION datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',703),
  ('datatype -> datatype O_EXPONENTE datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',704),
  ('datatype -> datatype O_MODULAR datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',705),
  ('datatype -> datatype OC_CONCATENAR datatype','datatype',3,'p_datatype_operadores_binarios2','grammar.py',714),
  ('datatype -> R_CASE caseList optElse R_END','datatype',4,'p_datatype_case_when','grammar.py',722),
  ('caseList -> caseList caseWhen','caseList',2,'p_case_list','grammar.py',728),
  ('caseList -> caseWhen','caseList',1,'p_case_list','grammar.py',729),
  ('caseWhen -> R_WHEN expBool R_THEN literal','caseWhen',4,'p_caseWhen','grammar.py',734),
  ('optElse -> R_ELSE literal','optElse',2,'p_caseWhen_2','grammar.py',738),
  ('optElse -> <empty>','optElse',0,'p_caseWhen_2','grammar.py',739),
  ('datatype -> O_RESTA datatype','datatype',2,'p_datatype_operadores_unarios','grammar.py',745),
  ('datatype -> O_SUMA datatype','datatype',2,'p_datatype_operadores_unarios','grammar.py',746),
  ('datatype -> columnName','datatype',1,'p_datatype_operandos','grammar.py',754),
  ('datatype -> literal','datatype',1,'p_datatype_operandos','grammar.py',755),
  ('datatype -> funcCall','datatype',1,'p_datatype_operandos','grammar.py',756),
  ('datatype -> extract','datatype',1,'p_datatype_operandos','grammar.py',757),
  ('datatype -> datePart','datatype',1,'p_datatype_operandos','grammar.py',758),
  ('datatype -> current','datatype',1,'p_datatype_operandos','grammar.py',759),
  ('datatype -> S_PARIZQ datatype S_PARDER','datatype',3,'p_datatype_agrupacion','grammar.py',767),
  ('expComp -> datatype OL_MENORQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',775),
  ('expComp -> datatype OL_MAYORQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',776),
  ('expComp -> datatype OL_MAYORIGUALQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',777),
  ('expComp -> datatype OL_MENORIGUALQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',778),
  ('expComp -> datatype S_IGUAL datatype','expComp',3,'p_expCompBinario_1','grammar.py',779),
  ('expComp -> datatype OL_DISTINTODE datatype','expComp',3,'p_expCompBinario_1','grammar.py',780),
  ('expComp -> datatype R_IS R_DISTINCT R_FROM datatype','expComp',5,'p_expCompBinario_2','grammar.py',788),
  ('expComp -> datatype R_IS R_NOT R_DISTINCT R_FROM datatype','expComp',6,'p_expCompBinario_3','grammar.py',798),
  ('expComp -> datatype R_BETWEEN datatype R_AND datatype','expComp',5,'p_expComp_ternario_1','grammar.py',808),
  ('expComp -> datatype R_NOT R_BETWEEN datatype R_AND datatype','expComp',6,'p_expComp_ternario_2','grammar.py',818),
  ('expComp -> datatype R_BETWEEN R_SYMMETRIC datatype R_AND datatype','expComp',6,'p_expComp_ternario_2','grammar.py',819),
  ('expComp -> datatype R_ISNULL','expComp',2,'p_expComp_unario_1','grammar.py',830),
  ('expComp -> datatype R_NOTNULL','expComp',2,'p_expComp_unario_1','grammar.py',831),
  ('expComp -> datatype R_IS R_NULL','expComp',3,'p_expComp_unario_2','grammar.py',840),
  ('expComp -> datatype R_IS R_TRUE','expComp',3,'p_expComp_unario_2','grammar.py',841),
  ('expComp -> datatype R_IS R_FALSE','expComp',3,'p_expComp_unario_2','grammar.py',842),
  ('expComp -> datatype R_IS R_UNKNOWN','expComp',3,'p_expComp_unario_2','grammar.py',843),
  ('expComp -> datatype R_IS R_NOT R_NULL','expComp',4,'p_expComp_unario_3','grammar.py',851),
  ('expComp -> datatype R_IS R_NOT R_TRUE','expComp',4,'p_expComp_unario_3','grammar.py',852),
  ('expComp -> datatype R_IS R_NOT R_FALSE','expComp',4,'p_expComp_unario_3','grammar.py',853),
  ('expComp -> datatype R_IS R_NOT R_UNKNOWN','expComp',4,'p_expComp_unario_3','grammar.py',854),
  ('stringExp -> STRING','stringExp',1,'p_stringExp','grammar.py',864),
  ('stringExp -> columnName','stringExp',1,'p_stringExp','grammar.py',865),
  ('subqValues -> R_ALL','subqValues',1,'p_subqValues','grammar.py',872),
  ('subqValues -> R_ANY','subqValues',1,'p_subqValues','grammar.py',873),
  ('subqValues -> R_SOME','subqValues',1,'p_subqValues','grammar.py',874),
  ('boolean -> R_EXISTS S_PARIZQ selectStmt S_PARDER','boolean',4,'p_boolean_1','grammar.py',881),
  ('boolean -> datatype R_IN S_PARIZQ selectStmt S_PARDER','boolean',5,'p_boolean_2','grammar.py',891),
  ('boolean -> datatype R_NOT R_IN S_PARIZQ selectStmt S_PARDER','boolean',6,'p_boolean_3','grammar.py',899),
  ('boolean -> expComp','boolean',1,'p_boolean_4','grammar.py',907),
  ('expBool -> expBool R_AND expBool','expBool',3,'p_expBool_1','grammar.py',915),
  ('expBool -> expBool R_OR expBool','expBool',3,'p_expBool_1','grammar.py',916),
  ('expBool -> R_NOT expBool','expBool',2,'p_expBool_2','grammar.py',924),
  ('expBool -> S_PARIZQ expBool S_PARDER','expBool',3,'p_expBool_3','grammar.py',932),
  ('expBool -> expBool optBoolPredicate','expBool',2,'p_expBool_5','grammar.py',940),
  ('expBool -> boolean','expBool',1,'p_expBool_4','grammar.py',948),
  ('optBoolPredicate -> R_IS R_TRUE','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',956),
  ('optBoolPredicate -> R_IS R_FALSE','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',957),
  ('optBoolPredicate -> R_IS R_UNKNOWN','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',958),
  ('optBoolPredicate -> R_IS R_NOT R_TRUE','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',966),
  ('optBoolPredicate -> R_IS R_NOT R_FALSE','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',967),
  ('optBoolPredicate -> R_IS R_NOT R_UNKNOWN','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',968),
  ('columnName -> ID','columnName',1,'p_columnName_id','grammar.py',976),
  ('columnName -> ID S_PUNTO ID','columnName',3,'p_columnName_table_id','grammar.py',985),
  ('booleanCheck -> idOrLiteral OL_MENORQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1003),
  ('booleanCheck -> idOrLiteral OL_MAYORQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1004),
  ('booleanCheck -> idOrLiteral OL_MAYORIGUALQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1005),
  ('booleanCheck -> idOrLiteral OL_MENORIGUALQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1006),
  ('booleanCheck -> idOrLiteral S_IGUAL idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1007),
  ('booleanCheck -> idOrLiteral OL_DISTINTODE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1008),
  ('booleanCheck -> idOrLiteral R_IS R_DISTINCT R_FROM idOrLiteral','booleanCheck',5,'p_booleanCheck_2','grammar.py',1016),
  ('booleanCheck -> idOrLiteral R_IS R_NOT R_DISTINCT R_FROM idOrLiteral','booleanCheck',6,'p_booleanCheck_3','grammar.py',1024),
  ('idOrLiteral -> ID','idOrLiteral',1,'p_idOrLiteral','grammar.py',1032),
  ('idOrLiteral -> INTEGER','idOrLiteral',1,'p_idOrLiteral','grammar.py',1033),
  ('idOrLiteral -> STRING','idOrLiteral',1,'p_idOrLiteral','grammar.py',1034),
  ('idOrLiteral -> DECIMAL','idOrLiteral',1,'p_idOrLiteral','grammar.py',1035),
  ('idOrLiteral -> CHARACTER','idOrLiteral',1,'p_idOrLiteral','grammar.py',1036),
  ('idOrLiteral -> R_TRUE','idOrLiteral',1,'p_idOrLiteral','grammar.py',1037),
  ('idOrLiteral -> R_FALSE','idOrLiteral',1,'p_idOrLiteral','grammar.py',1038),
  ('alterStmt -> R_ALTER R_DATABASE idOrString alterDb','alterStmt',4,'p_alterStmt','grammar.py',1065),
  ('alterStmt -> R_ALTER R_TABLE idOrString alterTableList','alterStmt',4,'p_alterStmt','grammar.py',1066),
  ('alterDb -> R_RENAME R_TO idOrString','alterDb',3,'p_alterDb','grammar.py',1078),
  ('alterDb -> R_OWNER R_TO ownerOPts','alterDb',3,'p_alterDb','grammar.py',1079),
  ('ownerOPts -> idOrString','ownerOPts',1,'p_ownerOpts','grammar.py',1088),
  ('ownerOPts -> R_CURRENT_USER','ownerOPts',1,'p_ownerOpts','grammar.py',1089),
  ('ownerOPts -> R_SESSION_USER','ownerOPts',1,'p_ownerOpts','grammar.py',1090),
  ('alterTableList -> alterTableList S_COMA alterTable','alterTableList',3,'p_alterTableList','grammar.py',1098),
  ('alterTableList -> alterTable','alterTableList',1,'p_alterTableList_u','grammar.py',1107),
  ('alterTable -> R_ADD alterAdd','alterTable',2,'p_alterTable','grammar.py',1115),
  ('alterTable -> R_ALTER alterAlter','alterTable',2,'p_alterTable','grammar.py',1116),
  ('alterTable -> R_DROP alterDrop','alterTable',2,'p_alterTable','grammar.py',1117),
  ('alterTable -> R_RENAME alterRename','alterTable',2,'p_alterTable','grammar.py',1118),
  ('alterAdd -> R_COLUMN ID types','alterAdd',3,'p_alterAdd_column','grammar.py',1126),
  ('alterAdd -> createConstraint','alterAdd',1,'p_alterAdd_constraint','grammar.py',1134),
  ('alterAdd -> createPrimary','alterAdd',1,'p_alterAdd_constraint','grammar.py',1135),
  ('alterAdd -> createForeign','alterAdd',1,'p_alterAdd_constraint','grammar.py',1136),
  ('alterAdd -> constrName R_UNIQUE S_PARIZQ ID S_PARDER','alterAdd',5,'p_alterAdd_unique','grammar.py',1144),
  ('alterAlter -> R_COLUMN ID R_SET nullOpt','alterAlter',4,'p_alterAlter','grammar.py',1152),
  ('alterAlter -> R_COLUMN ID R_SET defaultVal','alterAlter',4,'p_alterAlter','grammar.py',1153),
  ('alterAlter -> R_COLUMN ID R_TYPE types','alterAlter',4,'p_alterAlter','grammar.py',1154),
  ('alterDrop -> R_CONSTRAINT ID','alterDrop',2,'p_alterDrop','grammar.py',1162),
  ('alterDrop -> R_COLUMN ID','alterDrop',2,'p_alterDrop','grammar.py',1163),
  ('alterRename -> R_COLUMN ID R_TO ID','alterRename',4,'p_alterRename','grammar.py',1171),
  ('dropStmt -> R_DROP R_TABLE ifExists idOrString','dropStmt',4,'p_dropStmt','grammar.py',1189),
  ('dropStmt -> R_DROP R_DATABASE ifExists idOrString','dropStmt',4,'p_dropStmt','grammar.py',1190),
  ('ifExists -> R_IF R_EXISTS','ifExists',2,'p_ifExists','grammar.py',1200),
  ('ifExists -> <empty>','ifExists',0,'p_ifExists','grammar.py',1201),
  ('selectStmt -> R_SELECT R_DISTINCT selectParams fromCl whereCl groupByCl limitCl orderByCl','selectStmt',8,'p_selectStmt_1','grammar.py',1214),
  ('selectStmt -> R_SELECT selectParams fromCl whereCl groupByCl limitCl orderByCl','selectStmt',7,'p_selectStmt_2','grammar.py',1232),
  ('selectStmt -> selectStmt R_UNION allOpt selectStmt','selectStmt',4,'p_selectStmt_union','grammar.py',1249),
  ('selectStmt -> selectStmt R_INTERSECT allOpt selectStmt','selectStmt',4,'p_selectStmt_intersect','grammar.py',1255),
  ('selectStmt -> selectStmt R_EXCEPT allOpt selectStmt','selectStmt',4,'p_selectStmt_except','grammar.py',1261),
  ('selectStmt -> S_PARIZQ selectStmt S_PARDER','selectStmt',3,'p_selectStmt_agrupacion','grammar.py',1267),
  ('fromCl -> R_FROM tableExp','fromCl',2,'p_fromClause','grammar.py',1274),
  ('selectStmt -> R_SELECT selectParams','selectStmt',2,'p_selectstmt_only_params','grammar.py',1288),
  ('allOpt -> R_ALL','allOpt',1,'p_allOpt','grammar.py',1294),
  ('allOpt -> <empty>','allOpt',0,'p_allOpt','grammar.py',1295),
  ('selectParams -> O_PRODUCTO','selectParams',1,'p_selectparams_all','grammar.py',1302),
  ('selectParams -> selectList','selectParams',1,'p_selectparams_params','grammar.py',1308),
  ('selectList -> selectList S_COMA selectListParams optAlias','selectList',4,'p_selectList_list','grammar.py',1315),
  ('selectList -> selectListParams optAlias','selectList',2,'p_selectList_u','grammar.py',1325),
  ('selectListParams -> expresion','selectListParams',1,'p_selectListParams_1','grammar.py',1334),
  ('selectListParams -> ID S_PUNTO O_PRODUCTO','selectListParams',3,'p_selectListParams_2','grammar.py',1340),
  ('optAlias -> R_AS idOrString','optAlias',2,'p_optalias_as','grammar.py',1347),
  ('optAlias -> idOrString','optAlias',1,'p_optalias_id','grammar.py',1355),
  ('optAlias -> <empty>','optAlias',0,'p_optalias_none','grammar.py',1362),
  ('tableExp -> tableExp S_COMA fromBody','tableExp',3,'p_tableexp_list','grammar.py',1368),
  ('tableExp -> fromBody','tableExp',1,'p_tableexp_u','grammar.py',1375),
  ('fromBody -> ID optAlias','fromBody',2,'p_fromBody','grammar.py',1381),
  ('fromBody -> S_PARIZQ selectStmt S_PARDER R_AS idOrString','fromBody',5,'p_tableexp_subq','grammar.py',1390),
  ('joinList -> joinList2','joinList',1,'p_joinList','grammar.py',1397),
  ('joinList2 -> joinList2 joinCl','joinList2',2,'p_joinList_2','grammar.py',1402),
  ('joinList2 -> joinCl','joinList2',1,'p_joinList_2','grammar.py',1403),
  ('joinCl -> joinOpt R_JOIN columnName optAlias R_ON expBool','joinCl',6,'p_joinCl','grammar.py',1408),
  ('joinCl -> joinOpt R_JOIN columnName optAlias R_USING S_PARIZQ nameList S_PARDER','joinCl',8,'p_joinCl','grammar.py',1409),
  ('joinCl -> R_NATURAL joinOpt R_JOIN columnName optAlias','joinCl',5,'p_joinCl','grammar.py',1410),
  ('nameList -> nameList S_COMA columnName','nameList',3,'p_nameList','grammar.py',1417),
  ('nameList -> columnName','nameList',1,'p_nameList','grammar.py',1418),
  ('joinOpt -> R_INNER','joinOpt',1,'p_joinOpt','grammar.py',1424),
  ('joinOpt -> R_LEFT','joinOpt',1,'p_joinOpt','grammar.py',1425),
  ('joinOpt -> R_LEFT R_OUTER','joinOpt',2,'p_joinOpt','grammar.py',1426),
  ('joinOpt -> R_RIGHT','joinOpt',1,'p_joinOpt','grammar.py',1427),
  ('joinOpt -> R_RIGHT R_OUTER','joinOpt',2,'p_joinOpt','grammar.py',1428),
  ('joinOpt -> R_FULL','joinOpt',1,'p_joinOpt','grammar.py',1429),
  ('joinOpt -> R_FULL R_OUTER','joinOpt',2,'p_joinOpt','grammar.py',1430),
  ('whereCl -> R_WHERE expBool','whereCl',2,'p_whereCl','grammar.py',1436),
  ('whereCl -> <empty>','whereCl',0,'p_whereCl_none','grammar.py',1445),
  ('groupByCl -> R_GROUP R_BY groupList havingCl','groupByCl',4,'p_groupByCl_1','grammar.py',1452),
  ('groupByCl -> <empty>','groupByCl',0,'p_groupByCl_2','grammar.py',1460),
  ('groupList -> groupList S_COMA columnName','groupList',3,'p_groupList_1','grammar.py',1468),
  ('groupList -> groupList S_COMA INTEGER','groupList',3,'p_groupList_1','grammar.py',1469),
  ('groupList -> columnName','groupList',1,'p_groupList_2','grammar.py',1478),
  ('groupList -> INTEGER','groupList',1,'p_groupList_2','grammar.py',1479),
  ('havingCl -> R_HAVING expBool','havingCl',2,'p_havingCl_1','grammar.py',1486),
  ('havingCl -> <empty>','havingCl',0,'p_havingCl_2','grammar.py',1492),
  ('orderByCl -> R_ORDER R_BY orderList','orderByCl',3,'p_orderByCl','grammar.py',1498),
  ('orderByCl -> <empty>','orderByCl',0,'p_orderByCl_n','grammar.py',1504),
  ('orderList -> orderList S_COMA orderByElem','orderList',3,'p_orderList','grammar.py',1510),
  ('orderList -> orderByElem','orderList',1,'p_orderList_1','grammar.py',1517),
  ('orderByElem -> columnName orderOpts orderNull','orderByElem',3,'p_orderByElem','grammar.py',1524),
  ('orderByElem -> INTEGER orderOpts orderNull','orderByElem',3,'p_orderByElem','grammar.py',1525),
  ('orderOpts -> R_ASC','orderOpts',1,'p_orderOpts','grammar.py',1532),
  ('orderOpts -> R_DESC','orderOpts',1,'p_orderOpts','grammar.py',1533),
  ('orderOpts -> <empty>','orderOpts',0,'p_orderOpts_n','grammar.py',1540),
  ('orderNull -> R_NULLS R_FIRST','orderNull',2,'p_orderNull','grammar.py',1546),
  ('orderNull -> R_NULLS R_LAST','orderNull',2,'p_orderNull','grammar.py',1547),
  ('orderNull -> <empty>','orderNull',0,'p_orderNull_n','grammar.py',1554),
  ('limitCl -> R_LIMIT INTEGER offsetLimit','limitCl',3,'p_limitCl','grammar.py',1560),
  ('limitCl -> R_LIMIT R_ALL offsetLimit','limitCl',3,'p_limitCl','grammar.py',1561),
  ('limitCl -> <empty>','limitCl',0,'p_limitCl_n','grammar.py',1568),
  ('offsetLimit -> R_OFFSET INTEGER','offsetLimit',2,'p_offsetLimit','grammar.py',1574),
  ('offsetLimit -> <empty>','offsetLimit',0,'p_offsetLimit_n','grammar.py',1580),
  ('insertStmt -> R_INSERT R_INTO ID paramsColumn R_VALUES S_PARIZQ paramsList S_PARDER','insertStmt',8,'p_insertStmt','grammar.py',1593),
  ('paramsColumn -> S_PARIZQ idList S_PARDER','paramsColumn',3,'p_paramsColumn','grammar.py',1602),
  ('paramsColumn -> <empty>','paramsColumn',0,'p_paramsColumn_none','grammar.py',1608),
  ('updateStmt -> R_UPDATE fromBody R_SET updateCols whereCl','updateStmt',5,'p_updateStmt','grammar.py',1622),
  ('updateCols -> updateCols S_COMA updateVals','updateCols',3,'p_updateCols_list','grammar.py',1631),
  ('updateCols -> updateVals','updateCols',1,'p_updateCols_u','grammar.py',1638),
  ('updateVals -> ID S_IGUAL updateExp','updateVals',3,'p_updateVals','grammar.py',1644),
  ('updateExp -> datatype','updateExp',1,'p_updateExp','grammar.py',1651),
  ('updateExp -> R_DEFAULT','updateExp',1,'p_updateExp','grammar.py',1652),
  ('deleteStmt -> R_DELETE fromCl whereCl','deleteStmt',3,'p_deleteStmt','grammar.py',1666),
  ('truncateStmt -> R_TRUNCATE tableOpt ID','truncateStmt',3,'p_truncateStmt','grammar.py',1672),
  ('tableOpt -> R_TABLE','tableOpt',1,'p_tableOpt','grammar.py',1678),
  ('tableOpt -> <empty>','tableOpt',0,'p_tableOpt','grammar.py',1679),
  ('showStmt -> R_SHOW R_DATABASES likeOpt','showStmt',3,'p_showStmt','grammar.py',1685),
  ('likeOpt -> R_LIKE STRING','likeOpt',2,'p_likeOpt','grammar.py',1692),
  ('likeOpt -> <empty>','likeOpt',0,'p_likeOpt','grammar.py',1693),
  ('useStmt -> R_USE ID','useStmt',2,'p_useStmt','grammar.py',1703),
]
